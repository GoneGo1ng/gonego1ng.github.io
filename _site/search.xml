<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[关于 RocketMQ 多实例消费者的一个问题]]></title>
      <url>/rocketmq/2022/08/24/%E5%85%B3%E4%BA%8E-RocketMQ-%E5%A4%9A%E5%AE%9E%E4%BE%8B%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="text"><![CDATA[前言今天在和领导讨论关于 RocketMQ 的使用规范时，我提出我们团队在开发过程中使用到了多个实例的消费者分 tags 消费同一个 topic。领导敏锐地察觉到这种用法在集群环境下使用很可能有问题，让我验证一下。验证Consumer 的代码如下，在同一台服务器上起了两个进程（也就是两个消费者），原本以为会均衡的负载到这两个消费者上面。但是结果并不是这样，我一共发送了十条消息，这两个并没有收到全部十条消息，并且收到的消息全都相同。这个结果也证实了领导提出的疑问。@RocketMQMessageListener(        topic = "${demo.rocketmq.topic}",        consumerGroup = "taga-consumer-group",        selectorExpression = "${demo.rocketmq.tagA}")public class TagAConsumer implements RocketMQListener&lt;String&gt;, RocketMQPushConsumerLifecycleListener {    @Override    public void onMessage(String message) {        System.out.printf("------- TagAConsumer received: %s \n", message);    }    @Override    public void prepareStart(DefaultMQPushConsumer consumer) {        // 设置当前实例的名称        // consumer.setInstanceName("tag-a-consumer-instance@" + UtilAll.getPid());        consumer.setInstanceName("tag-a-consumer-instance");    }}分析带着上面这个问题，我对 RocketMQ 源码进行了简单分析。查看下面两段源码，我们可以发现 RocketMQ 默认的平均负载策略是根据 clientId 去分配的，那么，这个 clientId 又是哪里来的呢，我们接着往下看。RebalanceImpl.java...        AllocateMessageQueueStrategy strategy = this.allocateMessageQueueStrategy;List&lt;MessageQueue&gt; allocateResult = null;try {    allocateResult = strategy.allocate(        this.consumerGroup,        this.mQClientFactory.getClientId(), // 先看这里        mqAll,        cidAll);} catch (Throwable e) {    log.error("allocate message queue exception. strategy name: {}, ex: {}", strategy.getName(), e);    return false;}...AllocateMessageQueueAveragely：平均负载策略，RocketMQ 默认使用的策略。AllocateMessageQueueAveragely.javapackage org.apache.rocketmq.client.consumer.rebalance;import java.util.ArrayList;import java.util.List;import org.apache.rocketmq.client.log.ClientLogger;import org.apache.rocketmq.logging.InternalLogger;import org.apache.rocketmq.common.message.MessageQueue;/** * Average Hashing queue algorithm */public class AllocateMessageQueueAveragely extends AbstractAllocateMessageQueueStrategy {    public AllocateMessageQueueAveragely() {        log = ClientLogger.getLog();    }    public AllocateMessageQueueAveragely(InternalLogger log) {        this.log = log;    }    @Override    public List&lt;MessageQueue&gt; allocate(String consumerGroup, String currentCID, List&lt;MessageQueue&gt; mqAll,        List&lt;String&gt; cidAll) {        List&lt;MessageQueue&gt; result = new ArrayList&lt;MessageQueue&gt;();        if (!check(consumerGroup, currentCID, mqAll, cidAll)) {            return result;        }        // 再看这里        int index = cidAll.indexOf(currentCID);        int mod = mqAll.size() % cidAll.size();        int averageSize =            mqAll.size() &lt;= cidAll.size() ? 1 : (mod &gt; 0 &amp;&amp; index &lt; mod ? mqAll.size() / cidAll.size()                + 1 : mqAll.size() / cidAll.size());        int startIndex = (mod &gt; 0 &amp;&amp; index &lt; mod) ? index * averageSize : index * averageSize + mod;        int range = Math.min(averageSize, mqAll.size() - startIndex);        for (int i = 0; i &lt; range; i++) {            result.add(mqAll.get((startIndex + i) % mqAll.size()));        }        return result;    }    @Override    public String getName() {        return "AVG";    }}从下面这段源码中，我们可以发现，如果我们设置了一个固定值的 instanceName，那么生成的 clientId 的格式是这样的 IP@instanceName，当同一个服务器上同时起了两个服务（非容器），那么这两个服务的 IP 是相同的，instanceName 也是相同的，也就是说 clientId 也是相同的。再根据上面的负载均衡策略代码，我们就不难看出为什么会出现我前面验证的那个问题了。ClientConfig.java...public String buildMQClientId() {    StringBuilder sb = new StringBuilder();    sb.append(this.getClientIP());    sb.append("@");    sb.append(this.getInstanceName());    if (!UtilAll.isBlank(this.unitName)) {    sb.append("@");    sb.append(this.unitName);    }    return sb.toString();}...public void changeInstanceNameToPID() {    if (this.instanceName.equals("DEFAULT")) {    this.instanceName = String.valueOf(UtilAll.getPid());    }}...  如果想要进一步分析 RocketMQ 的源码，可以参考这位大佬写的这篇文章：Rocketmq源码分析12：consumer 负载均衡结论上面的问题一般只会出现在不使用容器部署的集群环境下（而且是同一台服务器），我们生产环境一般都是 k8s（cluster ip） 也就是说 Consumer 起来的时候拿到的 IP 是容器的 IP，不太会出现上面的问题。但开发过程中还是要注意，建议在设置 instanceName 的时候后面加一个随机数。写在最后😠气死，翻了翻 Git 上 RocketMQ 最新的源码，发现人家 RocketMQ 早就已经把这个 BUG 修复了，我还在这里用老版本（rocketmq-client:4.8.0）的代码分析了半天，气死了！ClientConfig.java...public String buildMQClientId() {    StringBuilder sb = new StringBuilder();    sb.append(this.getClientIP());    sb.append("@");    sb.append(this.getInstanceName());    if (!UtilAll.isBlank(this.unitName)) {        sb.append("@");        sb.append(this.unitName);    }    if (enableStreamRequestType) {        sb.append("@");        sb.append(RequestType.STREAM);    }    return sb.toString();}...public void changeInstanceNameToPID() {    if (this.instanceName.equals("DEFAULT")) {    this.instanceName = UtilAll.getPid() + "#" + System.nanoTime();    }}...]]></content>
      <categories>
        
          <category> RocketMQ </category>
        
      </categories>
      <tags>
        
          <tag> RocketMQ </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[如何使用 GitHub Pages 搭建自己的 Blog]]></title>
      <url>/blog/2022/08/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-GitHub-Pages-%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84-Blog/</url>
      <content type="text"><![CDATA[关于搭建 Blog，下面这篇文章已经介绍的比较详细了，但是我在按照他的步骤搭建过程中遇到了一些坑，这里记录一下，分享给大家。  参考：使用GitHub搭建自己的Blog搭建 Blog这部分参考文章的步骤没什么区别，并且参考文章写的更加详细，建议根据参考文章搭建。我把这部分加进来，主要是想测试一下图片的功能。新建 Repository填写 Repository name设置 GitHub Pages选择主题提交代码查看 Blog同步代码选择编辑器这部分参考文章没有说明使用的是什么编辑器，我这边直接用的是 IntelliJ IDEA。使用 IDEA 同步 GitHub 代码这一步就不多说，应该都会的吧。安装 NexT⚠️ 警告！警告！前方大量踩坑，不愿意折腾的同学可以趁早放弃了。也可能是我环境的问题，希望你们在操作的时候一切顺利。  参考：NexT 官方使用文档正常来说，安装 NexT 只需要几分钟就可以了，但是在这个过程中我遇到了很多坑，导致我搞了两个半天才搞定。下面记录一下：坑一安装依赖：bundle install 这一步报下面这个错：An error occurred while installing commonmarker (0.17.13), and Bundler cannot continue.解决方法：  重装 Homebrew，没有解决问题  重装 Ruby，重装之后发现用 Homebrew 安装的 Ruby 版本（3.1.x）和 Mac 自带的 Ruby 版本（2.6.x）不一致，又改环境变量把 Ruby 改到 Homebrew 安装的那个版本，但也没有解决问题  删除 Gemfile.lock 文件，重新执行 bundle install 命令，操作完成后换了一个错误：An error occurred while installing unf_ext (0.0.8.2), and Bundler cannot continue.  执行 xcode-select --install 命令，安装 xcode-select 后，再执行 bundle install 命令，执行成功 🎉🎉🎉坑二运行 Jekyll：bundle exec jekyll server 这一步报下面这个错：bundler: failed to load command: jekyll (/usr/local/bin/jekyll)解决方法：  执行 jekyll --version 命令查看 jekyll 版本号，返回 zsh: command not found: jekyll  执行 bundle info jekyll 命令，返回 jekyll 版本号 * jekyll (3.9.2)  折腾到这里，有点晕乎乎的了，记不太清楚后面做了什么操作  根据这位大佬的方法，执行了 bundle add webrick，再运行 Jekyll，终于成功了 🎉🎉🎉https://talk.jekyllrb.com/t/load-error-cannot-load-such-file-webrick/5417/5主要就以上两个大坑，解决问题的过程中还遇到了无数小坑，精力有限，没有深追这些问题的原因，而且是隔了一天再记录的，很多细节已经忘记了，希望这些模糊的记忆对大家有帮助。Blog 主题配置  NexT 官方文档已经又详细的说明了，这里就不多说了：主题配置写博客用手（其他部位也可以）写。写的过程中，发现了一个误以为是 BUG 的功能。如果文件开头的 date 属性中填的时间大于服务器时间，那么这篇文章是不会在 Blog 中显示的，猜测应该是 NexT 设计的一个定时发布文章的功能👍。最后附上两张可爱猫猫照🐱]]></content>
      <categories>
        
          <category> Blog </category>
        
      </categories>
      <tags>
        
          <tag> GitHub Pages </tag>
        
          <tag> Blog </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
